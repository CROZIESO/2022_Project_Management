import pygame, sys, random
# imports vector so I can use it instead of a list
from pygame.math import Vector2

class Food():
    def __init__(self):
        self.randomize()

    def draw_food(self):
        # create a rect in correct place - using vector above and x,y,w,h - not moving by pixels but by block_size
        food_rect = pygame.Rect(int(self.place.x * block_size),int(self.place.y * block_size),block_size,block_size)
        # draw rect/food - surface, colour,rect
        #pygame.draw.rect(window,(126,166,114) ,food_rect)
        window.blit(food_image,food_rect)

    def randomize(self):
        self.x = random.randint(0,block_number - 1)
        self.y = random.randint(0,block_number - 1)
        self.place = Vector2(self.x,self.y)

class Snake():
    def __init__(self):
        # starting position of snake
        self.body = [Vector2(5,10), Vector2(6,10), Vector2(7,10)]
        # create snake direction
        self.direction = Vector2(1,0)
        self.new_block = False

    def draw_snake(self):
        for square in self.body:
            # create a rect
            square_rect = pygame.Rect(int(square.x * block_size),int(square.y * block_size),block_size,block_size)
            # draw the rect
            pygame.draw.rect(window,(255,127,36), square_rect)
    
    def move_snake(self):
        if self.new_block == True:
            body_repeated = self.body[:]
            body_repeated.insert(0,body_repeated[0] + self.direction)
            self.body = body_repeated[:]
            self.new_block = False
        else:
            # move forward
            body_repeated = self.body[:-1]
            body_repeated.insert(0,body_repeated[0] + self.direction)
            self.body = body_repeated[:]

    def add_block(self):
        self.new_block = True


class GAME:
    def __init__(self):
        self.food= Food()
        self.snake = Snake()

    def update(self):
        self.snake.move_snake()
        self.check_overlap()

    def draw_elements(self):
        self.grid()
        self.food.draw_food() 
        self.snake.draw_snake()

    def check_overlap(self):
        if self.food.place == self.snake.body[0]:
            # food appears elsewhere
            self.food.randomize()
            # add another block to the snake
            self.snake.add_block()


    def grid(self):
        #sets up grid with purple grass
        grass_colour = (204,169,221)
        grid_line_colour = (200, 200, 200)

        # h,z as x,y positions
        for h in range(0, block_size * block_number, block_size):
            for z in range(0, block_size * block_number, block_size):
                # draws outline around the blocks in white
                grid_rect = pygame.Rect(h, z, block_size, block_size)
                pygame.draw.rect(window, grid_line_colour, grid_rect, 1)

        for row in range(block_number):
            # alternates the shade of purple within the column for each uneven row
            if row % 2 != 0:
                for col in range(block_number):
                    if col % 2 != 0:
                        # rect - x,y,w,h - selects blocks to shade diff colour
                        grass_rect = pygame.Rect(col * block_size,row * block_size,block_size,block_size)
                        # displays rect
                        pygame.draw.rect(window,grass_colour,grass_rect)
            else:
                # alternates the shade of purple within the column for each even row
                for col in range(block_number):
                    if col % 2 == 0:
                            # rect - x,y,w,h - selects blocks to shade diff colour
                            grass_rect = pygame.Rect(col * block_size,row * block_size,block_size,block_size)
                            # displays rect
                            pygame.draw.rect(window,grass_colour,grass_rect)

pygame.init()
# sets up blocks on window
block_size = 40
block_number = 20
# sets up window to be 800px by 800px
window = pygame.display.set_mode((block_size * block_number,block_size * block_number))
# clock object so that frame rate is consistent
clock = pygame.time.Clock()
image = pygame.image.load('images/food_green_apple.png').convert_alpha()
# scales image to correct size
food_image = pygame.transform.scale(image, (block_size -1, block_size -1))
# play game
main = GAME()

WINDOW_UPDATE = pygame.USEREVENT
pygame.time.set_timer(WINDOW_UPDATE,200)

while True:
    # start of loop for every game check for every possible event
    for event in pygame.event.get():
        # checks event to quit game
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == WINDOW_UPDATE:
            main.update()
        # sorting the movement related to each key
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                main.snake.direction = Vector2(0,-1)
            if event.key == pygame.K_DOWN:
                main.snake.direction = Vector2(0,1)
            if event.key == pygame.K_RIGHT:
                main.snake.direction = Vector2(1,0)
            if event.key == pygame.K_LEFT:
                main.snake.direction = Vector2(-1,0)

    # colours the window/background
    window.fill((177,156,217))
    main.draw_elements()
    pygame.display.update()
    clock.tick(60)
    



# notes - screen, display screen, rect - movement in all places - create rect itself, or take surface and create rect around it
# diff between rectangle and surface - rectangle easier to code, rectangle usually part of surface
# replace rect with any other shape if want
# blit - move one surface to another surface





# notes - screen, display screen, rect - movement in all places - create rect itself, or take surface and create rect around it
# diff between rectangle and surface - rectangle easier to code, rectangle usually part of surface
# replace rect with any other shape if want
# blit - move one surface to another surface
